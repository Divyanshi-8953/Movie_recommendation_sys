# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11E6XqRRZO9cIHZexqTE3BzFJ4f6-2anK

Some of the Reommendation System are -

1- Content Based $

2- Popularity Based

3- Collaborative Based

Cosine Similarity Algorithm
"""

import numpy as np
import pandas as pd
import difflib #for taking approx correct input
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity #find similarity btw movies

"""Data Collection and Preprocessing"""

movie_data = pd.read_csv("/content/movies.csv")

movie_data.head()

movie_data.shape

selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']

#replacing the null values with null string
for feature in selected_features:
  movie_data[feature] = movie_data[feature].fillna('')

combined_features = movie_data['genres'] + ' ' + movie_data['keywords'] + ' ' + movie_data['tagline'] + ' ' + movie_data['cast'] + ' ' + movie_data['director']

print(combined_features)

#convertinf text data into feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

#getting similarity scores using cosine similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

#getting name
movie_name = input('Enter the movie name: ')

#Create a list with all movie names given in the dataset
total_list = movie_data['title'].tolist()
print(total_list)

#finding the close match for movie name from ip
find_match = difflib.get_close_matches(movie_name, total_list)
print(find_match)

close_match = find_match[0]
print(close_match)

#find idx with title
idx_movie = movie_data[movie_data.title == close_match]['index'].values[0]
print(idx_movie)

#Getting a list of similar movies
similarity_score = list(enumerate(similarity[idx_movie]))
print(similarity_score)

#sorting the movies based on similarity score
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse= True)
print(sorted_similar_movies)

#print the name of similar movies based on the idx
print('Movies suggested for you: \n')

i=1

for movie in sorted_similar_movies:
  index= movie[0]
  title_movie = movie_data[movie_data.index==index]['title'].values[0]
  if (i<8):
    print(i, '-', title_movie)
    i+=1
  else:
    break

"""# **Movie Recommendation System**"""

movie_name = input('Enter the movie name: ')
total_list = movie_data['title'].tolist()
find_match = difflib.get_close_matches(movie_name, total_list)
close_match = find_match[0]
idx_movie = movie_data[movie_data.title == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[idx_movie]))
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse= True)
print('Movies suggested for you: \n')

i=1

for movie in sorted_similar_movies:
  index= movie[0]
  title_movie = movie_data[movie_data.index==index]['title'].values[0]
  if (i<8):
    print(i, '-', title_movie)
    i+=1
  else:
    break